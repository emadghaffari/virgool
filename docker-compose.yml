version: "3.3"
services:
  # -----------------------------
  # auth service - CRUD [users]
  # -----------------------------
  auth:
    build:
      context: ./auth
    restart: always
    volumes:
      - .:/go/src/github.com/emadghaffari/virgool
    depends_on:
      - db
      # - vault
    ports:
      - 8800:8081
      - 8801:8082
    networks:
      - application

  # -----------------------------
  # notif service - send notifs [HTML, SMS]
  # -----------------------------
  notification:
    build:
      context: ./notification
    restart: always
    volumes:
      - .:/go/src/github.com/emadghaffari/virgool
    depends_on:
      - db
      # - vault
    ports:
      - 8900:8081
      - 8901:8082
    networks:
      - application

  # -----------------------------
  # blog service - CRUD [comments, tags, posts]
  # -----------------------------
  blog:
    build:
      context: ./blog
    restart: always
    volumes:
      - .:/go/src/github.com/emadghaffari/virgool
    depends_on:
      - db
      # - vault
    ports:
      - 9000:8081
      - 9001:8082
    networks:
      - application

  # -----------------------------
  # club service - CRUD [comments, tags, posts]
  # -----------------------------
  club:
    build:
      context: ./club
    restart: always
    volumes:
      - ./club:/go/src/github.com/emadghaffari/virgool/club
    depends_on:
      - db
      # - vault
    ports:
      - 9100:8081
      - 9101:8082
    networks:
      - application

  # -----------------------------
  # mysql database
  # -----------------------------
  db:
    image: mysql:5.7
    command: --default-authentication-plugin=mysql_native_password
    restart: always
    secrets:
      - db-password
      - db-user
    environment:
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/db-password
      MYSQL_USER_FILE: /run/secrets/db-user
      MYSQL_DATABASE: virgool
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-u",
          "root",
          "-p$$MYSQL_ROOT_PASSWORD_FILE",
        ]
      interval: 20s
      timeout: 10s
      retries: 3
      # start_period: 40s
    volumes:
      - mysql-db:/var/lib/mysql
    networks:
      - application

  # -----------------------------
  # phpmyadmin
  # -----------------------------
  phpmyadmin:
    image: phpmyadmin
    secrets:
      - db-password
      - db-user
    environment:
      - PMA_ARBITRARY=1
      - PMA_HOST=db
      - PMA_PASSWORD_FILE=/run/secrets/db-password
      - PMA_USER_FILE=/run/secrets/db-user
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 20s
      timeout: 10s
      retries: 3
      # start_period: 40s
    restart: always
    ports:
      - 9595:80
    volumes:
      - /sessions
    networks:
      - application

  # -----------------------------
  # vault database
  # -----------------------------
  vault:
    build:
      context: ./docker/vault/vault
      dockerfile: Dockerfile
    ports:
      - 8200:8200
    volumes:
      - ./docker/vault/vault/config:/vault/config
      - ./docker/vault/vault/policies:/vault/policies
      - ./docker/vault/vault/data:/vault/data
      - ./docker/vault/vault/logs:/vault/logs
    environment:
      - VAULT_ADDR=http://127.0.0.1:8200
      - VAULT_API_ADDR=http://127.0.0.1:8200
    command: server -config=/vault/config/vault-config.json
    cap_add:
      - IPC_LOCK
    depends_on:
      - consul
    networks:
      - application

  # -----------------------------
  # consul-worker config
  # -----------------------------
  consul-worker:
    build:
      context: ./docker/vault/consul
      dockerfile: Dockerfile
    command: agent -server -join consul -config-file=/consul/config/config.json
    volumes:
      - ./docker/vault/consul/config/consul-config.json:/consul/config/config.json
    depends_on:
      - consul
    networks:
      - application

  # -----------------------------
  # consul
  # -----------------------------
  consul:
    build:
      context: ./docker/vault/consul
      dockerfile: Dockerfile
    ports:
      - 8500:8500
    command: agent -server -bind 0.0.0.0 -client 0.0.0.0 -bootstrap-expect 1 -config-file=/consul/config/config.json
    volumes:
      - ./docker/vault/consul/config/consul-config.json:/consul/config/config.json
      - ./docker/vault/consul/data:/consul/data
    networks:
      - application

  # -----------------------------
  # jaeger tracer
  # -----------------------------
  jaeger:
    image: jaegertracing/all-in-one:1.20
    ports:
      - "3333:6831/udp"
      - "3686:16686"
    networks:
      - application

  # -----------------------------
  # redis database
  # -----------------------------
  redis:
    hostname: redis
    image: redis
    networks:
      - application

  # -----------------------------
  # redis UI
  # -----------------------------
  redis-commander:
    hostname: redis-commander
    image: rediscommander/redis-commander:latest
    restart: always
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "6546:8081"
    networks:
      - application

  # -----------------------------
  # zookeeper
  # -----------------------------
  zoo1:
    image: zookeeper:3.4.13
    restart: always
    ports:
      - 2181:2181
      - 2888
      - 3888
    environment:
      ZOO_MY_ID: 1
      ZOO_TICK_TIME: 2000
      ZOO_INIT_LIMIT: 5
      ZOO_SYNC_LIMIT: 2
      ZOO_MAX_CLIENT_CNXNS: 60
      ZOO_STANDALONE_ENABLED: "false"
      ZOO_SERVERS: "server.1=0.0.0.0:2888:3888 server.2=zoo2:2888:3888"

    volumes:
      - ./docker/kafka/zoo1/data:/data
      - ./docker/kafka/zoo1/datalog:/datalog
    networks:
      - application

  # -----------------------------
  # zookeeper
  # -----------------------------
  zoo2:
    image: zookeeper:3.4.13
    restart: always
    ports:
      - 2182:2181
      - 2888
      - 3888
    environment:
      ZOO_MY_ID: 2
      ZOO_TICK_TIME: 2000
      ZOO_INIT_LIMIT: 5
      ZOO_SYNC_LIMIT: 2
      ZOO_MAX_CLIENT_CNXNS: 60
      ZOO_STANDALONE_ENABLED: "false"
      ZOO_SERVERS: "server.1=zoo1:2888:3888 server.2=0.0.0.0:2888:3888"
    volumes:
      - ./docker/kafka/zoo2/data:/data
      - ./docker/kafka/zoo2/datalog:/datalog
    networks:
      - application

  # -----------------------------
  # apache kafka
  # -----------------------------
  kafka1:
    image: wurstmeister/kafka
    restart: always
    ports:
      - "9092:9092"
    environment:
      # KAFKA_CREATE_TOPICS: 'message:4:2'
      KAFKA_ADVERTISED_HOST_NAME: kafka1
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181,zoo2:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_NUM_PARTITIONS: 4
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_LOG_DIRS: /kafka/logs
      KAFKA_ADVERTISED_PORT: 9092
      # KAFKA_ADVERTISED_LISTENERS: SASL_PLAINTEXT://:9092
      # KAFKA_LISTENERS: SASL_PLAINTEXT://:9092
      # KAFKA_DELETE_TOPIC_ENBALE: "true"
      # KAFKA_SASL_ENABLED_MECHANISMS: SCRAM-SHA-512
      # KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: SCRAM-SHA-512
      # KAFKA_SECURITY_INTER_BROKER_PROTOCOL: SASL_PLAINTEXT
      # KAFKA_OPTS: "-Djava.security.auth.login.config=/etc/kafka/kafka_server_jaas.conf"
    depends_on:
      - zoo1
      - zoo2
    volumes:
      - ./docker/kafka/broker1/kafka-logs:/kafka
      - ./docker/kafka/broker1/logs:/logs
      - ./docker/kafka/broker1/data:/data
      - /var/run/docker.sock:/var/run/docker.sock
      # - ./docker/kafka_server_jaas.conf:/etc/kafka/kafka_server_jaas.conf
    networks:
      - application

  # -----------------------------
  # apache kafka
  # -----------------------------
  kafka2:
    image: wurstmeister/kafka
    restart: always
    ports:
      - "9093:9092"
      - "9998:9998"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka2
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181,zoo2:2181"
      KAFKA_BROKER_ID: 2
      KAFKA_NUM_PARTITIONS: 4
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_LOG_DIRS: /kafka/logs
      KAFKA_ADVERTISED_PORT: 9092
      # KAFKA_ADVERTISED_LISTENERS: SASL_PLAINTEXT://:9092
      # KAFKA_LISTENERS: SASL_PLAINTEXT://:9092
      # KAFKA_DELETE_TOPIC_ENBALE: "true"
      # KAFKA_SASL_ENABLED_MECHANISMS: SCRAM-SHA-512
      # KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: SCRAM-SHA-512
      # KAFKA_SECURITY_INTER_BROKER_PROTOCOL: SASL_PLAINTEXT
      # KAFKA_OPTS: "-Djava.security.auth.login.config=/etc/kafka/kafka_server_jaas.conf"
    depends_on:
      - zoo1
      - zoo2
    volumes:
      - ./docker/kafka/broker2/kafka-logs:/kafka
      - ./docker/kafka/broker2/logs:/logs
      - ./docker/kafka/broker2/data:/data
      - /var/run/docker.sock:/var/run/docker.sock
      # - ./docker/kafka_server_jaas.conf:/etc/kafka/kafka_server_jaas.conf
    networks:
      - application

  # -----------------------------
  # apache kafka
  # -----------------------------
  kafka3:
    image: wurstmeister/kafka
    restart: always
    ports:
      - "9094:9092"
      - "9999:9998"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka3
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181,zoo2:2181"
      KAFKA_BROKER_ID: 3
      KAFKA_NUM_PARTITIONS: 4
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_LOG_DIRS: /kafka/logs
      KAFKA_ADVERTISED_PORT: 9092
      # KAFKA_ADVERTISED_LISTENERS: SASL_PLAINTEXT://:9092
      # KAFKA_LISTENERS: SASL_PLAINTEXT://:9092
      # KAFKA_DELETE_TOPIC_ENBALE: "true"
      # KAFKA_SASL_ENABLED_MECHANISMS: SCRAM-SHA-512
      # KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: SCRAM-SHA-512
      # KAFKA_SECURITY_INTER_BROKER_PROTOCOL: SASL_PLAINTEXT
      # KAFKA_OPTS: "-Djava.security.auth.login.config=/etc/kafka/kafka_server_jaas.conf"
    depends_on:
      - zoo1
      - zoo2
    volumes:
      - ./docker/kafka/broker3/kafka-logs:/kafka
      - ./docker/kafka/broker3/logs:/logs
      - ./docker/kafka/broker3/data:/data
      - /var/run/docker.sock:/var/run/docker.sock
      # - ./docker/kafka_server_jaas.conf:/etc/kafka/kafka_server_jaas.conf
    networks:
      - application

  # -----------------------------
  # Infrastructure Visualization
  # -----------------------------
  scope:
    image: weaveworks/scope:1.13.1
    hostname: weave-scope
    pid: "host"
    privileged: true
    ports:
      - "4040:4040"
    expose:
      - "4040"
    labels:
      - "works.weave.role=system"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:rw"
    command:
      - "--probe.docker"
      - "true"
    networks:
      - application

  # -----------------------------
  # elastic search
  # -----------------------------
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.7.1
    environment:
      - bootstrap.memory_lock=true
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - 9200:9200
      - 9300:9300
    stdin_open: true
    tty: true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "50"
    networks:
      - application

  # -----------------------------
  # kibana
  # -----------------------------
  kibana:
    image: docker.elastic.co/kibana/kibana:7.7.1
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - 5601:5601
    links:
      - elasticsearch:elasticsearch
    depends_on:
      - elasticsearch
    stdin_open: true
    tty: true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "50"
    networks:
      - application

  # -----------------------------
  # logstash for get collected logs with filebeat
  # -----------------------------
  logstash:
    image: docker.elastic.co/logstash/logstash:7.7.1
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ./docker/elk/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ./docker/elk/logstash.template.json:/usr/share/logstash/templates/logstash.template.json
    ports:
      - 5044:5044
    links:
      - elasticsearch:elasticsearch
    depends_on:
      - elasticsearch
    stdin_open: true
    tty: true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "50"
    networks:
      - application

  # -----------------------------
  # filebeat
  # -----------------------------
  filebeat:
    user: root
    image: docker.elastic.co/beats/filebeat:7.7.1
    links:
      - logstash:logstash
    depends_on:
      - logstash
    volumes:
      # - /var/log/doc/api-teacher:/usr/share/filebeat/api-teacher:ro
      - ./docker/elk/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
    command: ["--strict.perms=false"]
    ulimits:
      memlock:
        soft: -1
        hard: -1
    stdin_open: true
    tty: true
    deploy:
      mode: global
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "50"
    networks:
      - application

# secrets files
secrets:
  db-password:
    file: ./docker/database/mysql/password
  db-user:
    file: ./docker/database/mysql/user

volumes:
  mysql-db:

networks:
  application:
